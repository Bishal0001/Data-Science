'''Given a data frame consisting of Name, employment_type, department, and p_id for employees,
complete the function del_dupl() that first deletes the records with a specific given name,
where name is a string that needs to be deleted because this guy has left the organization,
then deletes the column p_id as the organization is moving to another fintech app and return
a data frame that consists of the latest employment details of the candidates without duplicate Names.

There are no two guys with the same name in the organization, if there are records with the same 
name then it should be assumed that the person has updated his profile (designation) in the organization.

The indices of the dataset of the returned data frame are being reset in the back-end.

Input Format:

A dictionary is taken as input which then typecasted to a data frame and passed as an argument.
A string
Output Format:

A data frame
Sample Input: {'Name':["Sam","Mark","Client",'Sam','Tiger','Sam'],'employment_type':['fte','fte','intern','fte','freelancer','fte'],
'department':['people','marketing','marketing','tech','marketing','tech'],'p_id':[1,2,3,4,5,6]}




Mark
Sample Output:



Sample Explanation:

The second row with the name "Mark" is deleted, and column "p_id" is deleted. In the end, a data frame consisting of the employee's
latest records (last occurrence) is returned. In the sample, it can be seen that "Sam" has multiple records therefore only his last 
record is preserved in the returned data frame.


''' SOL '''

import pandas as pd
def del_dupl(df,name):
    ''' df is a dataframe with columns ['Name', 'employment_type', 'department', 'p_id']
        name is a string.
        Output a dataframe is expected to be returned'''
        
    # YOUR CODE GOES HERE
    dff = df.drop_duplicates()
    dff = dff.drop('p_id',axis=1)
    dff = dff[dff['Name'] != name]
    dff = dff.drop_duplicates(subset=['Name'],keep='last')
    return (dff)
